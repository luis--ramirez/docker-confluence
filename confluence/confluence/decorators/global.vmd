#* @vtlvariable name="params" type="java.util.Map<java.lang.String, java.lang.Object>" *#
#* @vtlvariable name="infoPanelRequired" type="java.lang.Boolean" *#
#* @vtlvariable name="action" type="com.atlassian.confluence.dashboard.actions.DashboardAction" *#
#* @vtlvariable name="body" type="java.lang.String" *#
#* @vtlvariable name="helper" type="com.atlassian.confluence.themes.GlobalHelper" *#

## GLOBAL DECORATOR
##    This decorator handles a global context, i.e. information which is independent of space.
##    Supports modes: 'dashboard', 'userdir', 'rss'.

#set ($mode     = $params.get("mode"))
#set ($context  = $params.get("context"))
#set ($helper   = $params.get("helper"))

#macro(renderInfoPanel)
    ## INFO PANEL FOR ANY PAGE
    #infoPanelInitFromParams()
    #if ($infoPanelRequired)
        <div style="width: $params.get("infopanel-width")" id="helptd">
            #infoPanel(true true true true)
        </div>
    #end
#end

#macro(renderDashboardPanels $panelLocation)
    #foreach ($webPanel in $webInterfaceManager.getDisplayableWebPanels($panelLocation, {}))
    <div class="dashboard-item">
        $!webPanel.getHtml($req.getParameterMap())
    </div>
    #end
#end

#requireResourcesForContext("global")
<div class="pagebody">
#parse ( "/template/includes/actionerrors.vm" )

#if ($mode == "dashboard")
    #rssautodiscovery($action.rssDescriptor)
    #permitSearchEngines()
    ## If one or more plugins provide a web-panel to replace the dashbaord, we use the first one
    #set ($dashboardWebPanels = $webInterfaceManager.getDisplayableWebPanels("atl.dashboard", {}))
    #if ( ! $dashboardWebPanels.isEmpty())
        ## Dashboard from plugin
        <content tag="show-main-container">false</content>
        #if(!$darkFeatures.isDarkFeatureEnabled('react.ui.dashboard'))
            $!dashboardWebPanels.get(0).getHtml({})
        #else
        ## TODO: Remove this container once the parent container is converted to React.
        ## NOTE: This container should not be targetted with CSS or test rules.
            <div id="confluence-ui" class="confluence-dashboard"></div>
            <script>
                var __INITIAL_STATE__ = typeof __INITIAL_STATE__ !== 'undefined' ? __INITIAL_STATE__ : {};
            </script>
            #if($darkFeatures.isDarkFeatureEnabled('react.ui.experimental'))
                <script src="https://confluence-frontend-experiment.internal.domain.dev.atlassian.io/download/vendor.js"></script>
                <script src="https://confluence-frontend-experiment.internal.domain.dev.atlassian.io/download/app.js"></script>
            #else
                <script src="$action.getFrontendServiceURL()/download/vendor.js"></script>
                <script src="$action.getFrontendServiceURL()/download/app.js"></script>
            #end
        #end
    #else
        ## Dashboard from core
        #assistiveSkipLink("assistive.skiplink.to.dashboard.recent.updates" "dashboard-recently-updated")
        <div class="dashboard">
            <div class="dashboard-section">
                #parse ("/decorators/includes/dashboard-navigation.vm")
                <div class="dashboard-group left">
                    <div class="dashboard-item welcome-message wiki-content">
                        $action.welcomeMessage
                    </div>
                    #dashboard_renderGlobalActions("dashboardActionsId", ["system.dashboard"] )
                    #renderDashboardPanels("atl.dashboard.secondary")
                    ## atl.dashboard.left is deprecated as of Confluence 5.9. Use atl.dashboard.secondary instead
                    ## We should be able to remove this in 6.1
                    #renderDashboardPanels("atl.dashboard.left")
                </div>
                <div class="dashboard-group right wiki-content">
                    $helper.renderConfluenceMacro("{recently-updated-dashboard:showProfilePic=true}")
                </div>

                #renderInfoPanel()
            </div>
        </div>
    #end
#else
    ## Non-dashboard page
    #if ($params.get("suppress-default-navigation") != "true")
        <content tag="content-navigation">
            <div id="navigation" class="content-navigation">
                <ul class="ajs-menu-bar">
                    #menuMacros_renderButton("system.${mode}.button" "")
                </ul>
            </div>
        </content>
    #end
    <div class="dashboard-group $!mode">
        $body
    </div>

    #renderInfoPanel()
#end
</div>

#parse ( "/breadcrumbs.vm" )
