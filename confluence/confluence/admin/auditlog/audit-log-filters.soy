{namespace Confluence.Templates.Auditing.Filters}

/**
 * Renders the form for time filters on the Audit Log page
 */
{template .dateFilter}
<div>
    {call aui.form.form}
        {param id: 'time-filter-form' /}
        {param action: '#'/}
        {param content}
            <div class="filter-radio-container">
                {call aui.form.input}
                    {param id: 'all_radio_opt' /}
                    {param type: 'radio' /}
                    {param value: 'all' /}
                    {param isChecked: true /}
                    {param name: 'auditDateFilter' /}
                {/call}
                {call aui.form.label}
                    {param forField: 'all_radio_opt' /}
                    {param extraAttributes: ['name': 'all'] /}
                    {param content: getText('logged.event.filter.all') /}
                {/call}
            </div>
            <div class="filter-radio-container">
                {call aui.form.input}
                    {param id: 'wtl_radio_opt' /}
                    {param type: 'radio' /}
                    {param value: 'within' /}
                    {param name: 'auditDateFilter' /}
                {/call}
                {call aui.form.label}
                    {param forField: 'wtl_radio_opt' /}
                    {param extraAttributes: ['name': 'within'] /}
                    {param content: getText('logged.event.filter.within') /}
                {/call}
                {call aui.form.input}
                    {param id: 'wtl_input' /}
                    {param name: 'time-input' /}
                    {param type: 'number' /}
                    {param extraClasses: ['time-unit-value', 'short-field', 'text'] /}
                    {param extraAttributes: ['min': '1', 'step': '1'] /}
                {/call}
                {call .dateMeasurement /}
            </div>
            <div class="filter-radio-container">
                {call aui.form.input}
                    {param id: 'bet_radio_opt' /}
                    {param type: 'radio' /}
                    {param value: 'between' /}
                    {param name: 'auditDateFilter' /}
                {/call}
                {call aui.form.label}
                    {param forField: 'bet_radio_opt' /}
                    {param extraAttributes: ['name': 'between'] /}
                    {param content: getText('logged.event.filter.between') /}
                {/call}
                {call aui.form.input}
                    {param id: 'from-date-picker' /}
                    {param extraClasses: ['aui-date-picker', 'text'] /}
                    {param type: 'date' /}
                {/call}
                {call aui.form.label}
                    {param forField: 'bet_radio_opt' /}
                    {param extraAttributes: ['name': 'and'] /}
                    {param content} {sp}{getText('and.word')} {/param}
                {/call}
                {call aui.form.input}
                    {param id: 'to-date-picker' /}
                    {param extraClasses: ['aui-date-picker', 'text'] /}
                    {param type: 'date' /}
                {/call}
            </div>
            <div class="value-error"></div>
            {call aui.form.buttons}
                {param content}
                    {call aui.form.submit}
                        {param text: getText('update.word') /}
                    {/call}
                    {call aui.form.linkButton}
                        {param text: getText('close.name') /}
                    {/call}
                {/param}
            {/call}
        {/param}
    {/call}
</div>
{/template}

/**
 * Drop down list of time units
 */
{template .dateMeasurement}
{call aui.form.select}
    {param name: 'time-input' /}
    {param extraClasses: 'time-unit' /}
    {param options: [['text': getText('core.dateutils.minutes'), 'value': 'minutes'],
                     ['text': getText('core.dateutils.hours'), 'value': 'hours'],
                     ['text': getText('core.dateutils.days'), 'value': 'days'],
                     ['text': getText('core.dateutils.weeks'), 'value': 'weeks'],
                     ['text': getText('core.dateutils.months'), 'value': 'months']] /}
{/call}
{/template}